# -*- coding: utf-8 -*-
from django import forms
from django.contrib.auth.models import User
from django.template.loader import get_template
from django.shortcuts import render
from django.template import Context, Template
from django.core.context_processors import csrf
from django.shortcuts import render_to_response
from django.template.loader import render_to_string
from django.middleware.csrf import get_token
import logging
from library.models import Graduate, Title, School, Country, Town
from django.conf import settings

logger = logging.getLogger(__name__)

class PictureForm(forms.Form):
    picture = forms.FileField(label='Select a file')

class RegisterStep3Form(forms.ModelForm):
    proper_requests = {'question1': '1', 'question2': '2', 'question3': '3' }
    error = ''

    def render(self, request):
        csrf_token_value = get_token(request)
        return render_to_string("account/forms/registerformstep3.html", {'csrf_token_value': csrf_token_value, 'error': self.error})

    def is_valid(self, request):
        for k,v in self.proper_requests.iteritems():
            if k in self.data:
                if v != self.data[ k ]:
                    self.error = u'<span class="inform-error form-errors" style="display: block;">Вы неправильно ответили на вопросы!!!</span>'
                    return False
            else:
                self.error = u'<span class="inform-error form-errors" style="display: block;">Непредвиденная ошибка! Обратитесь к администратору!!!</span>'
                return False
        return True	
    class Meta:
        model = User
        fields = []

class RegisterStep2Form(forms.ModelForm):
    mandatory_fields = {'login' : u'Поле Имя не заполнено', 'firstname': u'Поле Отчество не заполнено', 'lastname': u'Поле Фамилия не заполнено', 'spec_id': u'Поле Основная специальность не заполнено', 'country': u'Поле Страна не заполнено', 'town': u'Поле Город не заполнено'}
    allfields = {'login': '', 'firstname': '', 'lastname': '', 'avatar': '', 'sex': '', 'birthday': '', 'spec_id': '', 'experience': '', 'addspeciality': '', 'addexperience': '', 'graduate': '', 'dissertation': '', 'title': '', 'addtitle': '', 'category': '', 'awords': '', 'organization': '', 'job': '', 'site': '', 'school': '', 'graduate_year': '', 'faculty': '', 'cathedra': '', 'country': '', 'town': '', 'phone_number': '', 'phone_visible': '', 'ICQ_Skype': '', 'social': ''}
    error = ""

    def handle_uploaded_file(self, f):
        logger.log(logging.DEBUG, 'media/profile_images/{0}'.format(f.name))
        with open('{0}/profile_images/{1}'.format(settings.MEDIA_ROOT, f.name), 'wb+') as destination:
            logger.log(logging.DEBUG, 'media/profile_images/{0}'.format(f.name))
            for chunk in f.chunks():
                destination.write(chunk)

    def is_valid(self, request):
        if( self.mandatory_valid() == False ):
            return False
        df = forms.DateField( required=False, input_formats=[ '%d %m %Y' ])
        try:
            df.clean( self.data[ 'birthday' ] )
        except:
            self.error = u'<span class="inform-error form-errors" style="display: block;">Дата рождения введена неверно</span>'
            return False
        self.readfields()
        if 'phone_visible' in self.data:
            self.allfields['phone_visible'] = 'no_visible'
        else:
            self.allfields['phone_visible'] = 'visible'
        if 'avatar' in request.FILES:
            self.allfields['avatar'] = 'profile_images/{0}'.format(request.FILES['avatar'].name)
            picture_form = PictureForm(request.POST, request.FILES)
            if picture_form.is_valid():
                self.handle_uploaded_file(request.FILES['avatar'])
        for k,v in self.allfields.iteritems():
            request.session[ k ] = v
        return True

    def readfields(self):
        for k,v in self.allfields.iteritems():
            if k in self.data:
                self.allfields[k] = self.data[k]
            else:
                self.allfields[k] = ''

    def getTown(self, country):
        return Town.objects.filter( country__name = country )
                
    def mandatory_valid(self):
        cf = forms.CharField()
        for k,v in self.mandatory_fields.iteritems():
            try:
                cf.clean(self.data[k])
            except:
                self.error = u'<span class="inform-error form-errors" style="display: block;">'+v+'</span>'
                return False
        return True

    def render(self, request):
        csrf_token_value = get_token(request)
        if request.session.get( 'country' ):
            country = request.session.get( 'country' )
        else:
            country = u'Россия'
        template_key_value = {'csrf_token_value': csrf_token_value, 'graduate_list': Graduate.objects.all(), 'title_list': Title.objects.all(), 'school_list': School.objects.all(), 'country_list': Country.objects.all(), 'town_list': Town.objects.filter( country__name = country ), 'error': self.error }
        for k,v in self.allfields.iteritems():
            if request.session.get(k):
                template_key_value[ k ] = request.session.get( k, '' )
                logger.log(logging.DEBUG, u' {0}=>{1} '.format(k, request.session.get( k )))
        
        return render_to_string("account/forms/registerformstep2.html", template_key_value)
    class Meta:
        model = User
        fields = []
    
class RegisterStep1Form(forms.ModelForm):
    username = forms.EmailField()
    password = forms.CharField(widget=forms.PasswordInput(), help_text="Please enter a password.")
    error = ''

    def render(self, request):
        csrf_token_value = get_token(request)
        return render_to_string("account/forms/registerformstep1.html", {'csrf_token_value': csrf_token_value, 'error_placeholder': self.error})

    def pass_valid(self, password):
        import re
        if re.match(r'[A-Za-z0-9@#$%^&+=]{6,}', password):
            return True
        else:
            self.error = u'<span class="inform-error">Пароль должен содержать не менее 6 символов<br>(символы латинского алфавита и цифры)</span>'
            return False

    def is_valid(self, request):
        ef = forms.EmailField()
        try:
            ef.clean(self.data['email'])
        except:
            self.error = u'<span class="inform-error">Электронный адрес введен неверно!!!</span>'
            return False
        if( self.pass_valid(self.data['password']) == False ):
            return False
        if( self.data['password'] != self.data['confirm'] ):
            self.error = u'<span class="inform-error">Введенные пароли не совпадают!!!</span>'
            return False
        request.session['email'] = self.data['email']
        request.session['password'] = self.data['password']
        request.session['confirm'] = self.data['confirm']
        return True	
    class Meta:
        model = User
        fields = []
