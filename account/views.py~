# -*- coding: utf-8 -*-
from django.http import HttpResponse
from django.template import RequestContext
from django.template import Context, Template
from django.shortcuts import render_to_response
from account.forms import RegisterStep1Form, RegisterStep2Form, RegisterStep3Form
from django.contrib.auth import authenticate, login
from django.http import HttpResponseRedirect, HttpResponse
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout
from datetime import datetime
from django.template.loader import get_template
from django.views.decorators.csrf import csrf_protect
import logging
from models import MyUser, MyUserManager
from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login
from datetime import datetime, date
from django.contrib.auth import logout
from django.core.urlresolvers import reverse

logger = logging.getLogger(__name__)

step2_form = ""

def user_logout(request):
    logout(request)
    return HttpResponseRedirect(reverse('lenta.views.mainpage'))

# Create your views here.
def user_login(request):
    context = RequestContext(request)
    error = ''
    logger.log(logging.DEBUG, request)
    if request.method == 'POST':
        username = request.POST['login']
        password = request.POST['password']
        user = authenticate(login=username, password=password)
        logger.log(logging.DEBUG, user)
        if user is not None:
            # Is the account active? It could have been disabled.
            if user.is_active:
                # If the account is valid and active, we can log the user in.
                # We'll send the user back to the homepage.
                login(request, user)
                return HttpResponseRedirect(reverse('lenta.views.mainpage'))
            else:
                # An inactive account was used - no logging in!
                return HttpResponse("Your Rango account is disabled.")
        else:
            # Bad login details were provided. So we can't log the user in.
            error = u'<span class="inform-error">Логин или пароль ошибочны!  <br>Попробуйте ввести пароли еще раз</span>'
    return render_to_response(
            'account/login.html',
            {'error': error},
            context)

def register1(request):
    # Like before, get the request's context.
    context = RequestContext(request)
    if request.user.is_authenticated():
        return HttpResponseRedirect(reverse('account.views.register4'))
    if request.method == 'POST':
        step1_form = RegisterStep1Form(data=request.POST)
        if step1_form.is_valid(request):
            return HttpResponseRedirect(reverse('account.views.register2'))
    else:
        step1_form = RegisterStep1Form()
    # Render the template depending on the context.
    return render_to_response(
            'account/register.html',
            {'register_form': step1_form.render(request), 'step1_active': 'active'},
            context)

def register2(request):
    # Like before, get the request's context.
    context = RequestContext(request)
    if request.user.is_authenticated():
        return HttpResponseRedirect(reverse('account.views.register4'))
    step2_form = RegisterStep2Form()
    if request.method == 'POST':
        step2_form = RegisterStep2Form(data=request.POST)
        if step2_form.is_valid(request):
            return HttpResponseRedirect(reverse('account.views.register3'))
    else:
        step2_form = RegisterStep2Form()
    # Render the template depending on the context.
    return render_to_response(
            'account/register.html',
            {'register_form': step2_form.render(request), 'step1_active': 'active', 'step2_active': 'active'},
            context)

def register3(request):
    # Like before, get the request's context.
    context = RequestContext(request)
    if request.user.is_authenticated():
        return HttpResponseRedirect(reverse('account.views.register4'))
    step3_form = RegisterStep3Form()
    if request.method == 'POST':
        step3_form = RegisterStep3Form(data=request.POST)
        if step3_form.is_valid(request):
            if MyUser.objects.filter(email = request.session[ 'email' ]):
                return HttpResponse( "Login %s is into database. Please reinter login" % request.session[ 'login' ] )         
            profile = MyUser()
            profile.email=request.session[ 'email' ]
            profile.login=request.session[ 'login' ]
            profile.firstname=request.session[ 'firstname' ]
            profile.lastname=request.session[ 'lastname' ]
            profile.spec_id=request.session[ 'spec_id' ]
            profile.town=request.session[ 'town' ]
            profile.country=request.session[ 'country' ]
            profile.avatar = request.session['avatar']
            profile.sex = request.session[ 'sex' ]
            birthday = request.session[ 'birthday' ].split();
            d1 = datetime.strptime('{0} {1} {2}'.format(birthday[0], birthday[1], birthday[2]),"%d %m %Y")
            profile.birthday = d1.strftime("%Y-%m-%d")
            profile.experience = request.session[ 'experience' ]
            profile.addspeciality = request.session[ 'addspeciality' ]
            profile.addexperience = request.session[ 'addexperience' ]
            profile.graduate = request.session[ 'graduate' ]
            profile.dissertation = request.session[ 'dissertation' ]
            profile.title = request.session[ 'title' ]
            profile.addtitle = request.session[ 'addtitle' ]
            profile.category = request.session[ 'category' ]
            profile.awords = request.session[ 'awords' ]
            profile.organization = request.session[ 'organization' ]
            profile.job = request.session[ 'job' ]
            profile.site = request.session[ 'site' ]
            profile.school = request.session[ 'school' ]
            profile.graduate_year = request.session[ 'graduate_year' ]
            profile.faculty = request.session[ 'faculty' ]
            profile.cathedra = request.session[ 'cathedra' ]
            profile.phone_number = request.session[ 'phone_number' ]
            profile.phone_visible = request.session[ 'phone_visible' ]
            profile.ICQ_Skype = request.session[ 'ICQ_Skype' ]
            profile.social = request.session[ 'social' ]
            profile.set_password(request.session["password"])
            profile.save()
            #profile.objects.create_user( email=request.session[ 'email' ], username=request.session[ 'username' ], first_name=request.session[ 'first_name' ], last_name=request.session[ 'last_name' ], main_spec=request.session[ 'main_spec' ], town=request.session[ 'town' ], country=request.session[ 'country' ], password=request.session[ 'password' ]);
            
            request.session[ 'registered' ] = 'TRUE'
            return HttpResponseRedirect(reverse('account.views.register4'))
    else:
        step3_form = RegisterStep3Form()
    # Render the template depending on the context.
    return render_to_response(
            'account/register.html',
            {'register_form': step3_form.render(request), 'step1_active': 'active', 'step2_active': 'active', 'step3_active': 'active'},
            context)

def register4(request):
    # Like before, get the request's context.
    context = RequestContext(request)
    content = u'<div class="title-holder"><h3>Спасибо, за уделённое нам время!</h3></div><div class="link-frame"><a href="{0}">перейти на «ленту публикаций»</a></div>'.format(reverse('lenta.views.mainpage'))
    # Render the template depending on the context.
    return render_to_response(
            'account/register.html',
            {'register_form': content, 'step1_active': 'active', 'step2_active': 'active', 'step3_active': 'active', 'step4_active': 'active'},
            context)
